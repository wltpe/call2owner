// <auto-generated />
using System;
using Call2Owner.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Call2Owner.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250605200305_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Call2Owner.Models.CabCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__CabCompa__3214EC07CF373046");

                    b.ToTable("CabCompany", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.DeliveryCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Delivery__3214EC07796F7DC6");

                    b.ToTable("DeliveryCompany", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.EntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DafaultValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("EntityType", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.EntityTypeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DetailJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDafault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("EntityTypeDetail");
                });

            modelBuilder.Entity("Call2Owner.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Call2Owner.Models.ModulePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ModuleId" }, "IX_ModulePermissions_ModuleId");

                    b.ToTable("ModulePermission");
                });

            modelBuilder.Entity("Call2Owner.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Call2Owner.Models.Resident", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ApprovedComment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EntityTypeDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDocumentUploaded")
                        .HasColumnType("bit");

                    b.Property<Guid>("SocietyFlatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeDetailId");

                    b.HasIndex("SocietyFlatId");

                    b.HasIndex("UserId");

                    b.ToTable("Resident", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentDocumentRequiredToRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EntityTypeDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeDetailId");

                    b.ToTable("ResidentDocumentRequiredToRegister", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentDocumentUploaded", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ResidentDocumentRequiredToRegisterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ResidentDocumentRequiredToRegisterId");

                    b.HasIndex("ResidentId");

                    b.ToTable("ResidentDocumentUploaded", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentFamily", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ExitType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FamilyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("ResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ResidentId");

                    b.ToTable("ResidentFamily", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentFrequentlyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AllowEntryInNext")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CabCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DaysOfWeek")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeliveryCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("EntriesPerDay")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("EntryDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EntryTimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("EntryTimeStart")
                        .HasColumnType("time");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FrequentlyType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLeaveAtGate")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSurpriseDelivery")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UniqueEntryCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Validity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VehicleNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("VisitingHelpCategoryCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CabCompanyId");

                    b.HasIndex("DeliveryCompanyId");

                    b.HasIndex("ResidentId");

                    b.HasIndex("VisitingHelpCategoryCompanyId");

                    b.ToTable("ResidentFrequentlyEntry", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentFrequentlyGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AllowEntryForNext")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Guests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrivateEntry")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("SelectDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("StartingFrom")
                        .HasColumnType("time");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UniqueEntryNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ValidFor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ResidentId");

                    b.ToTable("ResidentFrequentlyGuest");
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentPet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("DateOfVaccination")
                        .HasColumnType("date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("NextVaccinationDueOn")
                        .HasColumnType("date");

                    b.Property<string>("PetBreed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PetPicture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RemindMe")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("VaccinationDoc")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VaccinationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ResidentId");

                    b.ToTable("ResidentPet", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentVehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResidentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RfidTagNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("RFIdTagNumber");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("VehicleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ResidentId");

                    b.ToTable("ResidentVehicle", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentRoleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentRoleId" }, "IX_Roles_ParentRoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Call2Owner.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ModulePermissionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_RoleClaims_RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Call2Owner.Models.Society", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityTypeDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuggested")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocietyImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("SuggestedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SuggestedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Society", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.SocietyBuilding", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SocietyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SocietyId");

                    b.ToTable("SocietyBuilding", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.SocietyDocumentRequiredToRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EntityTypeDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeDetailId");

                    b.ToTable("SocietyDocumentRequiredToRegister", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.SocietyDocumentUploaded", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SocietyDocumentRequiredToRegisterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocietyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SocietyDocumentRequiredToRegisterId");

                    b.HasIndex("SocietyId");

                    b.ToTable("SocietyDocumentUploaded", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.SocietyFlat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlatImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SocietyBuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocietyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SocietyBuildingId");

                    b.HasIndex("SocietyId");

                    b.ToTable("SocietyFlat", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Statemage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityTypeDetailId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Otp")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("OTP");

                    b.Property<DateTime?>("OtpExpireTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OtpValidatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("RefreshTokenExpireTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ResendOtpTime")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeGenerationTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VerificationCodeValidationTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Call2Owner.Models.UserParent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserParent", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.VisitingHelpCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Visiting__3214EC078E004FA9");

                    b.ToTable("VisitingHelpCategory", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.VisitingHelpCategoryCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("VisitingHelpCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Visiting__3214EC07CE8F7A25");

                    b.HasIndex("VisitingHelpCategoryId");

                    b.ToTable("VisitingHelpCategoryCompany", (string)null);
                });

            modelBuilder.Entity("Call2Owner.Models.City", b =>
                {
                    b.HasOne("Call2Owner.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_City_State");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Call2Owner.Models.EntityTypeDetail", b =>
                {
                    b.HasOne("Call2Owner.Models.EntityType", "EntityType")
                        .WithMany("EntityTypeDetails")
                        .HasForeignKey("EntityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EntityTypeDetails_EntityType");

                    b.Navigation("EntityType");
                });

            modelBuilder.Entity("Call2Owner.Models.ModulePermission", b =>
                {
                    b.HasOne("Call2Owner.Models.Module", "Module")
                        .WithMany("ModulePermissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Call2Owner.Models.Resident", b =>
                {
                    b.HasOne("Call2Owner.Models.EntityTypeDetail", "EntityTypeDetail")
                        .WithMany("Residents")
                        .HasForeignKey("EntityTypeDetailId")
                        .HasConstraintName("FK_Resident_EntityTypeDetails");

                    b.HasOne("Call2Owner.Models.SocietyFlat", "SocietyFlat")
                        .WithMany("Residents")
                        .HasForeignKey("SocietyFlatId")
                        .IsRequired()
                        .HasConstraintName("FK_Resident_SocietyFlat");

                    b.HasOne("Call2Owner.Models.User", "User")
                        .WithMany("Residents")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Resident_Users");

                    b.Navigation("EntityTypeDetail");

                    b.Navigation("SocietyFlat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentDocumentRequiredToRegister", b =>
                {
                    b.HasOne("Call2Owner.Models.EntityTypeDetail", "EntityTypeDetail")
                        .WithMany("ResidentDocumentRequiredToRegisters")
                        .HasForeignKey("EntityTypeDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_ResidentDocumentRequiredToRegister_EntityTypeDetails");

                    b.Navigation("EntityTypeDetail");
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentDocumentUploaded", b =>
                {
                    b.HasOne("Call2Owner.Models.ResidentDocumentRequiredToRegister", "ResidentDocumentRequiredToRegister")
                        .WithMany("ResidentDocumentUploadeds")
                        .HasForeignKey("ResidentDocumentRequiredToRegisterId")
                        .IsRequired()
                        .HasConstraintName("FK_ResidentDocumentUploaded_DocRequirement");

                    b.HasOne("Call2Owner.Models.Resident", "Resident")
                        .WithMany("ResidentDocumentUploadeds")
                        .HasForeignKey("ResidentId")
                        .IsRequired()
                        .HasConstraintName("FK_ResidentDocumentUploaded_Resident");

                    b.Navigation("Resident");

                    b.Navigation("ResidentDocumentRequiredToRegister");
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentFamily", b =>
                {
                    b.HasOne("Call2Owner.Models.Resident", "Resident")
                        .WithMany("ResidentFamilies")
                        .HasForeignKey("ResidentId")
                        .IsRequired()
                        .HasConstraintName("FK_ResidentFamily_Resident");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentFrequentlyEntry", b =>
                {
                    b.HasOne("Call2Owner.Models.CabCompany", "CabCompany")
                        .WithMany("ResidentFrequentlyEntries")
                        .HasForeignKey("CabCompanyId")
                        .HasConstraintName("FK_ResidentFrequentlyEntry_CabCompany");

                    b.HasOne("Call2Owner.Models.DeliveryCompany", "DeliveryCompany")
                        .WithMany("ResidentFrequentlyEntries")
                        .HasForeignKey("DeliveryCompanyId")
                        .HasConstraintName("FK_ResidentFrequentlyEntry_DeliveryCompany");

                    b.HasOne("Call2Owner.Models.Resident", "Resident")
                        .WithMany("ResidentFrequentlyEntries")
                        .HasForeignKey("ResidentId")
                        .IsRequired()
                        .HasConstraintName("FK_ResidentFrequentlyEntry_Resident");

                    b.HasOne("Call2Owner.Models.VisitingHelpCategoryCompany", "VisitingHelpCategoryCompany")
                        .WithMany("ResidentFrequentlyEntries")
                        .HasForeignKey("VisitingHelpCategoryCompanyId")
                        .HasConstraintName("FK_ResidentFrequentlyEntry_VisitingHelpCategoryCompany");

                    b.Navigation("CabCompany");

                    b.Navigation("DeliveryCompany");

                    b.Navigation("Resident");

                    b.Navigation("VisitingHelpCategoryCompany");
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentFrequentlyGuest", b =>
                {
                    b.HasOne("Call2Owner.Models.Resident", "Resident")
                        .WithMany("ResidentFrequentlyGuests")
                        .HasForeignKey("ResidentId")
                        .IsRequired()
                        .HasConstraintName("FK_ResidentFrequentlyGuests_Resident");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentPet", b =>
                {
                    b.HasOne("Call2Owner.Models.Resident", "Resident")
                        .WithMany("ResidentPets")
                        .HasForeignKey("ResidentId")
                        .IsRequired()
                        .HasConstraintName("FK_ResidentPet_Resident");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentVehicle", b =>
                {
                    b.HasOne("Call2Owner.Models.Resident", "Resident")
                        .WithMany("ResidentVehicles")
                        .HasForeignKey("ResidentId")
                        .IsRequired()
                        .HasConstraintName("FK_ResidentVehicle_Resident");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("Call2Owner.Models.Role", b =>
                {
                    b.HasOne("Call2Owner.Models.Role", "ParentRole")
                        .WithMany("InverseParentRole")
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("Call2Owner.Models.RoleClaim", b =>
                {
                    b.HasOne("Call2Owner.Models.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Call2Owner.Models.Society", b =>
                {
                    b.HasOne("Call2Owner.Models.City", "City")
                        .WithMany("Societies")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Society_City");

                    b.HasOne("Call2Owner.Models.Country", "Country")
                        .WithMany("Societies")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Society_Country");

                    b.HasOne("Call2Owner.Models.State", "State")
                        .WithMany("Societies")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("FK_Society_State");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Call2Owner.Models.SocietyBuilding", b =>
                {
                    b.HasOne("Call2Owner.Models.Society", "Society")
                        .WithMany("SocietyBuildings")
                        .HasForeignKey("SocietyId")
                        .IsRequired()
                        .HasConstraintName("FK_SocietyBuilding_Society");

                    b.Navigation("Society");
                });

            modelBuilder.Entity("Call2Owner.Models.SocietyDocumentRequiredToRegister", b =>
                {
                    b.HasOne("Call2Owner.Models.EntityTypeDetail", "EntityTypeDetail")
                        .WithMany("SocietyDocumentRequiredToRegisters")
                        .HasForeignKey("EntityTypeDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_SocietyDocRequired_EntityTypeDetails");

                    b.Navigation("EntityTypeDetail");
                });

            modelBuilder.Entity("Call2Owner.Models.SocietyDocumentUploaded", b =>
                {
                    b.HasOne("Call2Owner.Models.SocietyDocumentRequiredToRegister", "SocietyDocumentRequiredToRegister")
                        .WithMany("SocietyDocumentUploadeds")
                        .HasForeignKey("SocietyDocumentRequiredToRegisterId")
                        .IsRequired()
                        .HasConstraintName("FK_SocietyDocumentUploaded_RequiredDoc");

                    b.HasOne("Call2Owner.Models.Society", "Society")
                        .WithMany("SocietyDocumentUploadeds")
                        .HasForeignKey("SocietyId")
                        .IsRequired()
                        .HasConstraintName("FK_SocietyDocumentUploaded_Society");

                    b.Navigation("Society");

                    b.Navigation("SocietyDocumentRequiredToRegister");
                });

            modelBuilder.Entity("Call2Owner.Models.SocietyFlat", b =>
                {
                    b.HasOne("Call2Owner.Models.SocietyBuilding", "SocietyBuilding")
                        .WithMany("SocietyFlats")
                        .HasForeignKey("SocietyBuildingId")
                        .IsRequired()
                        .HasConstraintName("FK_SocietyFlat_SocietyBuilding");

                    b.HasOne("Call2Owner.Models.Society", "Society")
                        .WithMany("SocietyFlats")
                        .HasForeignKey("SocietyId")
                        .IsRequired()
                        .HasConstraintName("FK_SocietyFlat_Society");

                    b.Navigation("Society");

                    b.Navigation("SocietyBuilding");
                });

            modelBuilder.Entity("Call2Owner.Models.State", b =>
                {
                    b.HasOne("Call2Owner.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_State_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Call2Owner.Models.User", b =>
                {
                    b.HasOne("Call2Owner.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Call2Owner.Models.UserParent", b =>
                {
                    b.HasOne("Call2Owner.Models.User", "User")
                        .WithMany("UserParents")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserParent_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Call2Owner.Models.UserProfile", b =>
                {
                    b.HasOne("Call2Owner.Models.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProfile_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Call2Owner.Models.VisitingHelpCategoryCompany", b =>
                {
                    b.HasOne("Call2Owner.Models.VisitingHelpCategory", "VisitingHelpCategory")
                        .WithMany("VisitingHelpCategoryCompanies")
                        .HasForeignKey("VisitingHelpCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_VisitingHelpCategoryCompany_VisitingHelpCategory");

                    b.Navigation("VisitingHelpCategory");
                });

            modelBuilder.Entity("Call2Owner.Models.CabCompany", b =>
                {
                    b.Navigation("ResidentFrequentlyEntries");
                });

            modelBuilder.Entity("Call2Owner.Models.City", b =>
                {
                    b.Navigation("Societies");
                });

            modelBuilder.Entity("Call2Owner.Models.Country", b =>
                {
                    b.Navigation("Societies");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Call2Owner.Models.DeliveryCompany", b =>
                {
                    b.Navigation("ResidentFrequentlyEntries");
                });

            modelBuilder.Entity("Call2Owner.Models.EntityType", b =>
                {
                    b.Navigation("EntityTypeDetails");
                });

            modelBuilder.Entity("Call2Owner.Models.EntityTypeDetail", b =>
                {
                    b.Navigation("ResidentDocumentRequiredToRegisters");

                    b.Navigation("Residents");

                    b.Navigation("SocietyDocumentRequiredToRegisters");
                });

            modelBuilder.Entity("Call2Owner.Models.Module", b =>
                {
                    b.Navigation("ModulePermissions");
                });

            modelBuilder.Entity("Call2Owner.Models.Resident", b =>
                {
                    b.Navigation("ResidentDocumentUploadeds");

                    b.Navigation("ResidentFamilies");

                    b.Navigation("ResidentFrequentlyEntries");

                    b.Navigation("ResidentFrequentlyGuests");

                    b.Navigation("ResidentPets");

                    b.Navigation("ResidentVehicles");
                });

            modelBuilder.Entity("Call2Owner.Models.ResidentDocumentRequiredToRegister", b =>
                {
                    b.Navigation("ResidentDocumentUploadeds");
                });

            modelBuilder.Entity("Call2Owner.Models.Role", b =>
                {
                    b.Navigation("InverseParentRole");

                    b.Navigation("RoleClaims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Call2Owner.Models.Society", b =>
                {
                    b.Navigation("SocietyBuildings");

                    b.Navigation("SocietyDocumentUploadeds");

                    b.Navigation("SocietyFlats");
                });

            modelBuilder.Entity("Call2Owner.Models.SocietyBuilding", b =>
                {
                    b.Navigation("SocietyFlats");
                });

            modelBuilder.Entity("Call2Owner.Models.SocietyDocumentRequiredToRegister", b =>
                {
                    b.Navigation("SocietyDocumentUploadeds");
                });

            modelBuilder.Entity("Call2Owner.Models.SocietyFlat", b =>
                {
                    b.Navigation("Residents");
                });

            modelBuilder.Entity("Call2Owner.Models.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Societies");
                });

            modelBuilder.Entity("Call2Owner.Models.User", b =>
                {
                    b.Navigation("Residents");

                    b.Navigation("UserParents");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("Call2Owner.Models.VisitingHelpCategory", b =>
                {
                    b.Navigation("VisitingHelpCategoryCompanies");
                });

            modelBuilder.Entity("Call2Owner.Models.VisitingHelpCategoryCompany", b =>
                {
                    b.Navigation("ResidentFrequentlyEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
